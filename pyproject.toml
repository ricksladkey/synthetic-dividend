[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "synthetic-dividend"
version = "0.1.0"
description = "A sophisticated rules-based investment strategy that generates systematic cash flow from growth stocks while maintaining long-term compound exposure"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Rick Sladkey", email = "ricksladkey@users.noreply.github.com"}
]
keywords = ["finance", "investing", "backtesting", "algorithmic-trading", "portfolio-management"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Financial :: Investment",
    "Operating System :: OS Independent",
]

dependencies = [
    "pandas>=1.0",
    "matplotlib>=3.0",
    "yfinance>=0.2.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "mypy>=1.0",
    "black>=23.0",
    "flake8>=6.0",
    "pylint>=3.0",
    "isort>=5.0",
]

[project.urls]
Homepage = "https://github.com/ricksladkey/synthetic-dividend"
Repository = "https://github.com/ricksladkey/synthetic-dividend"
Documentation = "https://github.com/ricksladkey/synthetic-dividend/blob/main/README.md"
Issues = "https://github.com/ricksladkey/synthetic-dividend/issues"

[project.scripts]
# Main CLI entry point
synthetic-dividend = "src.cli:main"

# Direct access to core modules
sd-backtest = "src.run_model:main"
sd-compare = "src.compare.batch_comparison:main"
sd-research = "src.research.optimal_rebalancing:main"
sd-volatility-alpha = "src.research.volatility_alpha:main"

# Convenience scripts for common operations (replacing batch files)
sd-run-model = "src.run_model:main"
sd-run-tests = "src.cli:test_command"
sd-calc-orders = "src.tools.order_calculator:main"
sd-compare-table = "src.compare.table:main"
sd-plotter = "src.compare.plotter:main"

# Test convenience scripts
sd-test-sd = "src.cli:test_sd_command"
sd-test-buy-and-hold = "src.cli:test_buy_and_hold_command"
sd-test-batch-comparison = "src.cli:test_batch_comparison_command"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.git
  | \.venv
  | __pycache__
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
skip_gitignore = true
known_first_party = ["src"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Start lenient, tighten later
ignore_missing_imports = true  # Many finance libs lack stubs

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = "-v --cov=src --cov-report=term-missing --cov-report=html"

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/__pycache__/*", "*/cache/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
